-------------------------------------------------
-------------Assignment #2 Populating the tables
-------------------------------------------------

--IC_CATEGORY: 5 entries
--Hard coded: small volume allows it, and this way the values are closer to real values
USE [Item_Catalogue]
GO
TRUNCATE TABLE dbo.IC_CATEGORY;
GO

INSERT INTO dbo.IC_CATEGORY
(CATEGORY_ID, CATEGORY_NAME, CATEGORY_DESC)
VALUES
(1,'Food','Meat, dairy, greens, fruits'),
(2,'Drinks','Coke, beer, wine, wiskey, vodka, orange juice'),
(3,'Perfumes','Fragrances for men and women'),
(4,'Sports','Shoes for different sports like tennis, basketball, running'),
(5,'Fashion_Accesories','Bags, purses');


--IC_BRAND: 10 entries
--Hard coded: small volume allows it, and this way the values are closer to real values

TRUNCATE TABLE dbo.IC_BRAND;
GO

INSERT INTO dbo.IC_BRAND
(BRAND_ID, BRAND_NAME, BRAND_DESC)
VALUES
(1,'Cris Tim','Cold meats, salamis and sausages'),
(2,'Prod Lacta','Milk, yogurt, and cheese'),
(3,'Shay&Blue','Brittish fragrances for him and her'),
(4,'Paco Rabanne','Best selling frangrances for men and women'),
(5,'Coca Cola Company','Soft drinks: sodas, juices and water.'),
(6,'Johnny Walker','Blended scotch wiskey'),
(7,'Nike','Authentic athletic performance'),
(8,'Brandblack','Look great winning'),
(9,'Prada','Get your knock off cheaper in New York'),
(10,'Louis Vuitton','For people with more money than common sense');


--IC_BRAND: 10,000 entries
--Generated: volume necessary doesn't allow it

TRUNCATE TABLE dbo.IC_ITEM;
GO

-----------------------------------------------------------------------------------------
-------Used a generator for 200 elements * 5 categories * 10 brands => 10K lines of insert
-------Using Cross Joins for speed
-------Coupled with a common table expression for readibility
-------this would also allow scalability by adding new layers of generators to increase the total # entries generated
-----------------------------------------------------------------------------------------
With  
Generator0 as (Select gen_col FROM (Values ('0'),('1'),('2'),('3')) AS s0 (gen_col)),  ----4
Generator1 as (Select Concat(s1.gen_col,s2.gen_col) as gen_col from Generator0 s1 CROSS JOIN Generator0 s2),  -- 4 x 4 = 16
Generator2 as (Select Concat(s1.gen_col,s2.gen_col) as gen_col from Generator1 s1 CROSS JOIN Generator1 s2    -- 16 x 16 = 256
)

INSERT INTO dbo.IC_ITEM
(ITEM_ID, ITEM_NAME, ITEM_DESCRIPTION, BRAND_ID, CATEGORY_ID)
--VALUES

select top(10000)
Concat(a.gen_col,BRAND_ID,CATEGORY_ID)
,LEFT('Item ' + a.gen_col + ' ' + b.Brand_Name + '. ' + c.CATEGORY_NAME ,100)
,LEFT('Desc ' + a.gen_col + ' ' + b.BRAND_DESC + '. ' + c.CATEGORY_DESC ,1000)
,BRAND_ID
,CATEGORY_ID
from Generator2 a
CROSS JOIN
dbo.IC_BRAND b
CROSS JOIN
dbo.IC_CATEGORY c;


--PR_PRICE: 100,000 entries
--Generated--Generated: volume necessary doesn't allow it
USE master
GO
TRUNCATE TABLE [Pricing_Application].dbo.PR_PRICE;
GO

-----------------------------------------------------------------------------------------
-------Used a generator for 16 distinct dates/prices * 10k items => >100K lines for insert
-------Using Cross Joins for speed
-------Coupled with a common table expression for readibility
-------this would also allow scalability by adding new layers of generators to increase the total # entries generated
-----------------------------------------------------------------------------------------
With  
Generator0 as (Select gen_col FROM (Values (1),(2),(3),(4)) AS s0 (gen_col)),  ----4
Generator1 as (Select Concat(s1.gen_col,s2.gen_col) as gen_col from Generator0 s1 CROSS JOIN Generator0 s2),  -- 4 x 4 = 16
GeneratorDates as (Select CONVERT(date,DATEADD(dd,CONVERT(int, gen_col), GETDATE())) AS [PRICE_DATE] from Generator1
)

INSERT INTO [Pricing_Application].dbo.PR_PRICE
(ITEM_ID, PRICE_DATE, PRICE_VALUE)

select top(100000) -- respecting the price 100k instruction
a.ITEM_ID
,b.[PRICE_DATE]
,Convert(float,Concat(a.ITEM_ID,a.BRAND_ID,a.CATEGORY_ID))

from Item_Catalogue.dbo.IC_ITEM a
CROSS JOIN
GeneratorDates b;

